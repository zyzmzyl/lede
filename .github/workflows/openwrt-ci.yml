#＃
＃这是免费软件，可以使用MIT。
＃ 
＃版权所有（C）2019 P3TERX <https://p3terx.com>
＃版权所有（C）2019 KFERMercer <KFER.Mercer@gmail.com>
＃ 
＃ <https://github.com/KFERMercer/OpenWrt-CI>
＃

名称：OpenWrt-CI

于：
  推送：
    分支机构：
      - CI-演示
  ＃      ↑↑↑改成你的分支名，一般是master
  ＃时间表：
  ＃    -cron：0 20 * * *
  ＃发布：
  ＃    类型：[已发布]

职位：
  建立：
    运行：ubuntu-latest

    步骤：
      - 名称：结帐
        用途：actions / checkout @ master
        与：
          参考：CI演示
        ＃       ↑↑↑改成你的分支名，一般是master

      - 名称：初始化环境
        env：
          DEBIAN_FRONTEND：非互动
        运行：|
          docker rmi`docker images -q`
          echo“正在删除文件，请稍候...”
          须藤rm -rf \
            / usr / share / dotnet \
            / etc / mysql \
            / etc / php
          sudo -E apt-get清除\
            天蓝色
            ghc * \
            祖鲁*
            hhvm \
            llvm * \
            火狐
            谷歌* \
            dotnet * \
            电源外壳 \
            openjdk * \
            mysql * \
            php *
          sudo -E apt-get更新
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl -dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
          须藤-E apt-get -y autoremove --purge
          须藤-E apt-get clean
      - 名称：更新供稿
        运行：|
          ./scripts/feeds更新-a
          ./scripts/feeds install -a
      - 名称：Costom配置文件
        运行：|
          rm -f ./.config*
          触摸./.config
          ＃
          ＃=======================固件定制部分====================== ==
          ＃ 
          ＃ 
          ＃如果不对本区块链所做的任何编辑，则应生成默认配置固件。 
          ＃ 
          ＃以下为定制化固件选项和说明：
          ＃
          ＃
          ＃某些插件/选项是重置开启的，如果想要关闭，请参照以下示例进行编写：
          ＃ 
          ＃========================================
          ＃| ＃取消编译VMware实质：|
          ＃| cat >> .config << EOF |
          ＃| ＃未设置CONFIG_VMDK_IMAGES |
          ＃| EOF |
          ＃========================================
          ＃
          ＃ 
          ＃以下是一些提前准备好的一些插件选项。
          ＃直接取消注释相应代码块即可应用。不要取消注释代码块上的汉字说明。
          ＃如果不需要代码块里的某某配置，只需要删除相应行。
          ＃
          ＃如果需要其他插件，请按照示例自行添加。
          ＃注意，只需添加依赖链末端的包。如果你需要插件A，同时A依赖B，即只需要添加A.
          ＃ 
          ＃任何您想要对固件进行怎样的定制，都需要且只需要修改EOF回环内的内容。
          ＃ 
          ＃编译x64固件：
          猫>> .config << EOF
          CONFIG_TARGET_x86 = y
          CONFIG_TARGET_x86_64 = y
          CONFIG_TARGET_x86_64_Generic = y
          紧急行动
          ＃固件压缩：
          猫>> .config << EOF
          CONFIG_TARGET_IMAGES_GZIP = y
          紧急行动
          ＃编译UEFI固件：
          猫>> .config << EOF
          CONFIG_EFI_IMAGES = y
          紧急行动
          ＃IPv6支持：
          猫>> .config << EOF
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6 = y
          CONFIG_PACKAGE_ipv6helper = y
          紧急行动
          ＃多文件系统支持：
          猫>> .config << EOF
          CONFIG_PACKAGE_kmod-fs-nfs = y
          CONFIG_PACKAGE_kmod-fs-nfs-common = y
          CONFIG_PACKAGE_kmod-fs-nfs-v3 = y
          CONFIG_PACKAGE_kmod-fs-nfs-v4 = y
          CONFIG_PACKAGE_kmod-fs-ntfs = y
          CONFIG_PACKAGE_kmod-fs-squashfs = y
          紧急行动
          ＃USB3.0支持：
          猫>> .config << EOF
          CONFIG_PACKAGE_kmod-usb-ohci = y
          CONFIG_PACKAGE_kmod-usb-ohci-pci = y
          CONFIG_PACKAGE_kmod-usb2 = y
          CONFIG_PACKAGE_kmod-usb2-pci = y
          CONFIG_PACKAGE_kmod-usb3 = y
          紧急行动
          ＃常用LuCI插件选择：
          猫>> .config << EOF
          CONFIG_PACKAGE_luci-app-adbyby-plus = y
          CONFIG_PACKAGE_luci-app-aria2 = y
          CONFIG_PACKAGE_luci-app-baidupcs-web = y
          CONFIG_PACKAGE_luci-app-docker = y
          CONFIG_PACKAGE_luci-app-frpc = y
          CONFIG_PACKAGE_luci-app-hd-idle = y
          CONFIG_PACKAGE_luci-app-kodexplorer = y
          CONFIG_PACKAGE_luci-app-minidlna = y
          CONFIG_PACKAGE_luci-app-openvpn = y
          CONFIG_PACKAGE_luci-app-openvpn-server = y
          CONFIG_PACKAGE_luci-app-qbittorrent = y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun = y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks = y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Server = y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Socks = y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray = y
          CONFIG_PACKAGE_luci-app-ttyd = y
          CONFIG_PACKAGE_luci-app-v2ray-server = y
          CONFIG_PACKAGE_luci-app-verysync = y
          CONFIG_PACKAGE_luci-app-webadmin = y
          CONFIG_PACKAGE_luci-app-wireguard = y
          CONFIG_PACKAGE_luci-app-wrtbwmon = y
          紧急行动
          ＃LuCI主题：
          猫>> .config << EOF
          CONFIG_PACKAGE_luci-theme-argon = y
          CONFIG_PACKAGE_luci-theme-netgear = y
          紧急行动
          ＃常见缺点：
          猫>> .config << EOF
          CONFIG_PACKAGE_curl = y
          CONFIG_PACKAGE_htop = y
          CONFIG_PACKAGE_nano = y
          CONFIG_PACKAGE_screen = y
          CONFIG_PACKAGE_tree = y
          CONFIG_PACKAGE_vim-fuller = y
          CONFIG_PACKAGE_wget = y
          紧急行动
          ＃取消编译VMware常规以及补充（不要删除被缩进的注释符号）：
          猫>> .config << EOF
          ＃未设置CONFIG_TARGET_IMAGES_PAD
          ＃未设置config_vmdk_images
          紧急行动
          ＃ 
          ＃========================固件定制部分结束===================== ===
          ＃ 
          sed -i's / ^ [\ t] * // g'./.config
          使defconfig
      - 名称：下载程序包源代码
        运行：|
          进行下载-j8
          找到dl -size -1024c -exec ls -l {} \;
          找到dl -size -1024c -exec rm -f {} \;
      - 名称：编译固件
        运行：|
          echo -e“ $（nproc）线程构建。”
          使-j $（nproc）V = s
      - 名称：上传工件
        用途：actions / upload-artifact @ master
        与：
          名称：OpenWrt固件
          路径：bin /目标
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
# 

name: OpenWrt-CI

on:
  schedule:
    - cron: 0 20 * * *

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          # 利用挂载在 /mnt/ 的 14G 额外空间:
          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir/host && ln -s /mnt/openwrt/build_dir/host ./build_dir/host
          # mkdir -p ./build_dir/host && ln -s /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir

          df -h

      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: make defconfig

      - name: Make download
        run: |
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: find ./bin/targets/ -type d -name "packages" | xargs rm -rf {}

      - name: Upload artifact
        uses: actions/upload-artifact@master
        with:
          name: OpenWrt firmware
          path: ./bin/targets/
